package com.styleai.service;

import com.styleai.dto.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Random;

@Service
public class AIService {

    @Value("${ai.openai.api-key}")
    private String openaiApiKey;

    @Value("${ai.openai.base-url}")
    private String openaiBaseUrl;

    private final WebClient webClient;
    private final Random random = new Random();

    public AIService() {
        this.webClient = WebClient.builder().build();
    }

    public AIAnalysisResponse analyzeImage(AIAnalysisRequest request) {
        // For now, return mock data. In production, integrate with OpenAI Vision API
        return generateMockAnalysis();
    }

    public AIImageGenerationResponse generateImage(AIImageGenerationRequest request) {
        // For now, return mock data. In production, integrate with DALL-E API
        return generateMockImage(request);
    }

    public OutfitSuggestionResponse generateOutfitSuggestions(OutfitSuggestionRequest request) {
        // For now, return mock data. In production, integrate with OpenAI GPT API
        return generateMockOutfitSuggestions(request);
    }

    private AIAnalysisResponse generateMockAnalysis() {
        String[] names = {"Cotton T-Shirt", "Denim Jeans", "Leather Jacket", "Wool Sweater", "Silk Blouse"};
        String[] categories = {"Tops", "Bottoms", "Outerwear", "Dresses", "Shoes"};
        String[] colors = {"White", "Blue", "Black", "Red", "Gray", "Navy", "Beige"};
        List<String> allSeasons = Arrays.asList("Spring", "Summer", "Autumn", "Winter", "All");

        AIAnalysisResponse response = new AIAnalysisResponse();
        response.setName(names[random.nextInt(names.length)]);
        response.setCategory(categories[random.nextInt(categories.length)]);
        response.setColor(colors[random.nextInt(colors.length)]);
        
        // Random seasons (1-3 seasons)
        int numSeasons = random.nextInt(3) + 1;
        List<String> selectedSeasons = allSeasons.subList(0, numSeasons);
        response.setSeasons(selectedSeasons);
        
        response.setDataAiHint(response.getColor().toLowerCase() + " " + response.getName().toLowerCase());
        
        return response;
    }

    private AIImageGenerationResponse generateMockImage(AIImageGenerationRequest request) {
        // Mock image URLs - in production, these would be generated by DALL-E
        String[] mockImageUrls = {
            "https://placehold.co/400x600/png",
            "https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=400&h=600&fit=crop",
            "https://images.unsplash.com/photo-1434389677669-e08b4cac3105?w=400&h=600&fit=crop",
            "https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=400&h=600&fit=crop"
        };

        AIImageGenerationResponse response = new AIImageGenerationResponse();
        response.setImageUrl(mockImageUrls[random.nextInt(mockImageUrls.length)]);
        
        // Use provided details or generate defaults
        response.setName(request.getName() != null ? request.getName() : "Generated Item");
        response.setCategory(request.getCategory() != null ? request.getCategory() : "Tops");
        response.setColor(request.getColor() != null ? request.getColor() : "Blue");
        response.setSeasons(request.getSeason() != null ? 
            Arrays.asList(request.getSeason()) : Arrays.asList("All"));
        response.setDataAiHint(response.getColor().toLowerCase() + " " + response.getName().toLowerCase());
        
        return response;
    }

    private OutfitSuggestionResponse generateMockOutfitSuggestions(OutfitSuggestionRequest request) {
        List<ClosetItemDTO> items = request.getClosetItems();
        String occasion = request.getOccasion() != null ? request.getOccasion() : "Casual Day Out";
        
        OutfitSuggestionResponse.OutfitSuggestion suggestion1 = new OutfitSuggestionResponse.OutfitSuggestion(
            "White Cotton T-Shirt with Blue Denim Jeans and White Sneakers",
            occasion,
            "A classic, comfortable combination perfect for everyday wear. The neutral colors work well together and the outfit is versatile for various activities.",
            items.size() >= 3 ? Arrays.asList(items.get(0).getId(), items.get(1).getId(), items.get(2).getId()) : 
                Arrays.asList(items.get(0).getId())
        );

        OutfitSuggestionResponse.OutfitSuggestion suggestion2 = new OutfitSuggestionResponse.OutfitSuggestion(
            "Black Leather Jacket with Black Trousers and Brown Loafers",
            "Evening Event",
            "A sophisticated look that balances edgy and elegant. The leather jacket adds personality while the trousers keep it polished.",
            items.size() >= 3 ? Arrays.asList(items.get(1).getId(), items.get(2).getId(), items.get(0).getId()) : 
                Arrays.asList(items.get(0).getId())
        );

        OutfitSuggestionResponse.OutfitSuggestion suggestion3 = new OutfitSuggestionResponse.OutfitSuggestion(
            "Gray Hoodie with Denim Shorts and White Sneakers",
            "Weekend Relaxation",
            "Perfect for a laid-back weekend. The hoodie provides comfort while the shorts keep you cool, and sneakers complete the casual vibe.",
            items.size() >= 3 ? Arrays.asList(items.get(2).getId(), items.get(0).getId(), items.get(1).getId()) : 
                Arrays.asList(items.get(0).getId())
        );

        return new OutfitSuggestionResponse(Arrays.asList(suggestion1, suggestion2, suggestion3));
    }
}