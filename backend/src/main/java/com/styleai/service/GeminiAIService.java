package com.styleai.service;

import com.styleai.dto.AIAnalysisResponse;
import com.styleai.dto.AIImageAnalysisRequest;
import com.styleai.dto.AIImageGenerationResponse;
import com.styleai.dto.AITextToImageRequest;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

@Service
public class GeminiAIService {

    @Value("${ai.gemini.api-key}")
    private String geminiApiKey;

    @Value("${ai.gemini.base-url}")
    private String geminiBaseUrl;

    private final RestTemplate restTemplate = new RestTemplate();
    private final Random random = new Random();

    public AIAnalysisResponse analyzeClothingImage(AIImageAnalysisRequest request) {
        // For now, return mock data. In production, integrate with Gemini Vision API
        return generateMockAnalysisFromImage();
    }

    public AIImageGenerationResponse generateClothingImage(AITextToImageRequest request) {
        // For now, return mock data. In production, integrate with Gemini text-to-image API
        return generateMockImageFromText(request);
    }

    public AIAnalysisResponse analyzeTextForClothing(String itemName) {
        // Analyze text to extract clothing information
        return generateMockAnalysisFromText(itemName);
    }

    private AIAnalysisResponse generateMockAnalysisFromImage() {
        String[] names = {"Cotton T-Shirt", "Denim Jeans", "Leather Jacket", "Wool Sweater", "Silk Blouse", "Casual Shirt", "Dress Pants"};
        String[] categories = {"Tops", "Bottoms", "Outerwear", "Dresses", "Shoes"};
        String[] colors = {"White", "Blue", "Black", "Red", "Gray", "Navy", "Beige", "Brown", "Green"};
        List<String> allSeasons = Arrays.asList("Spring", "Summer", "Autumn", "Winter", "All");

        AIAnalysisResponse response = new AIAnalysisResponse();
        response.setName(names[random.nextInt(names.length)]);
        response.setCategory(categories[random.nextInt(categories.length)]);
        response.setColor(colors[random.nextInt(colors.length)]);
        
        // Random seasons (1-3 seasons)
        int numSeasons = random.nextInt(3) + 1;
        List<String> selectedSeasons = allSeasons.subList(0, numSeasons);
        response.setSeasons(selectedSeasons);
        
        response.setDataAiHint(response.getColor().toLowerCase() + " " + response.getName().toLowerCase());
        
        return response;
    }

    private AIImageGenerationResponse generateMockImageFromText(AITextToImageRequest request) {
        // Mock image URLs - in production, these would be generated by Gemini
        String[] mockImageUrls = {
            "https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=400&h=600&fit=crop",
            "https://images.unsplash.com/photo-1434389677669-e08b4cac3105?w=400&h=600&fit=crop",
            "https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=400&h=600&fit=crop",
            "https://images.unsplash.com/photo-1516762689617-e1cffcef479d?w=400&h=600&fit=crop"
        };

        AIImageGenerationResponse response = new AIImageGenerationResponse();
        response.setImageUrl(mockImageUrls[random.nextInt(mockImageUrls.length)]);
        
        // Analyze the item name to suggest details
        AIAnalysisResponse analysis = analyzeTextForClothing(request.getItemName());
        response.setName(analysis.getName());
        response.setCategory(analysis.getCategory());
        response.setColor(analysis.getColor());
        response.setSeasons(analysis.getSeasons());
        response.setDataAiHint(analysis.getDataAiHint());
        
        return response;
    }

    private AIAnalysisResponse generateMockAnalysisFromText(String itemName) {
        AIAnalysisResponse response = new AIAnalysisResponse();
        String lowerName = itemName.toLowerCase();
        
        // Simple text analysis for category
        if (lowerName.contains("shirt") || lowerName.contains("tee") || lowerName.contains("top") || 
            lowerName.contains("blouse") || lowerName.contains("sweater") || lowerName.contains("hoodie")) {
            response.setCategory("Tops");
        } else if (lowerName.contains("jeans") || lowerName.contains("pants") || lowerName.contains("trousers") || 
                   lowerName.contains("shorts") || lowerName.contains("skirt")) {
            response.setCategory("Bottoms");
        } else if (lowerName.contains("dress")) {
            response.setCategory("Dresses");
        } else if (lowerName.contains("jacket") || lowerName.contains("coat") || lowerName.contains("blazer")) {
            response.setCategory("Outerwear");
        } else if (lowerName.contains("shoe") || lowerName.contains("sneaker") || lowerName.contains("boot") || 
                   lowerName.contains("sandal") || lowerName.contains("loafer")) {
            response.setCategory("Shoes");
        } else {
            response.setCategory("Accessories");
        }
        
        // Simple color detection
        String[] colors = {"white", "black", "blue", "red", "green", "yellow", "brown", "gray", "pink", "purple"};
        String detectedColor = "Unknown";
        for (String color : colors) {
            if (lowerName.contains(color)) {
                detectedColor = color.substring(0, 1).toUpperCase() + color.substring(1);
                break;
            }
        }
        response.setColor(detectedColor);
        
        // Default seasons based on category
        if (response.getCategory().equals("Outerwear")) {
            response.setSeasons(Arrays.asList("Autumn", "Winter"));
        } else if (lowerName.contains("shorts") || lowerName.contains("tank") || lowerName.contains("sundress")) {
            response.setSeasons(Arrays.asList("Summer"));
        } else if (lowerName.contains("sweater") || lowerName.contains("coat")) {
            response.setSeasons(Arrays.asList("Winter"));
        } else {
            response.setSeasons(Arrays.asList("All"));
        }
        
        response.setName(itemName);
        response.setDataAiHint(detectedColor.toLowerCase() + " " + itemName.toLowerCase());
        
        return response;
    }

    // Method to call actual Gemini Vision API (for future implementation)
    private String callGeminiVisionAPI(String imageBase64, String prompt) {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.set("Authorization", "Bearer " + geminiApiKey);
            headers.set("Content-Type", "application/json");

            Map<String, Object> requestBody = new HashMap<>();
            // Add Gemini Vision API specific request structure here
            
            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);
            
            ResponseEntity<String> response = restTemplate.exchange(
                geminiBaseUrl + "/models/gemini-pro-vision:generateContent",
                HttpMethod.POST,
                entity,
                String.class
            );
            
            return response.getBody();
        } catch (Exception e) {
            throw new RuntimeException("Failed to call Gemini Vision API", e);
        }
    }

    // Method to call actual Gemini text-to-image API (for future implementation)
    private String callGeminiTextToImageAPI(String prompt) {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.set("Authorization", "Bearer " + geminiApiKey);
            headers.set("Content-Type", "application/json");

            Map<String, Object> requestBody = new HashMap<>();
            // Add Gemini text-to-image API specific request structure here
            
            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);
            
            ResponseEntity<String> response = restTemplate.exchange(
                geminiBaseUrl + "/models/gemini-pro:generateContent",
                HttpMethod.POST,
                entity,
                String.class
            );
            
            return response.getBody();
        } catch (Exception e) {
            throw new RuntimeException("Failed to call Gemini text-to-image API", e);
        }
    }
}